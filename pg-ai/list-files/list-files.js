import * as fs from "fs";
import * as path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
const textFileExtensions = /\.(txt|md|js|ts|json|html|css|env|yml|yaml)$/i;

// –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const readDirectory = (dir) => {
  fs.readdir(dir, (err, files) => {
    if (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", err);
      return;
    }

    files.forEach((file) => {
      const filePath = path.join(dir, file);

      fs.stat(filePath, (err, stats) => {
        if (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ ${file}:`, err);
          return;
        }

        if (stats.isDirectory()) {
          readDirectory(filePath);
        } else {
          const isTextFile = textFileExtensions.test(file) || file.startsWith(".env");

          if (isTextFile) {
            console.log(`üìú ${file}`);

            try {
              const content = fs.readFileSync(filePath, "utf8");
              console.log("üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:");
              console.log(content.substring(0, 5000)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 5000 —Å–∏–º–≤–æ–ª–∞–º–∏
              console.log("‚Äî".repeat(50));
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, error.message);
            }
          } else {
            console.log(`üìÅ –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª (–Ω–µ —á–∏—Ç–∞–µ–º): ${file}`);
          }
        }
      });
    });
  });
};

// –ß–∏—Ç–∞–µ–º –ø—É—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
const readDirectoriesFromFile = (filePath) => {
  fs.readFile(filePath, "utf8", (err, data) => {
    if (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø—É—Ç—è–º–∏:", err);
      return;
    }

    const directories = data.split("\n").map((line) => line.trim()).filter(Boolean);

    directories.forEach((dirOrFile) => {
      fs.stat(dirOrFile, (err, stats) => {
        if (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—Ç–∏:", err);
          return;
        }

        if (stats.isDirectory()) {
          console.log(`üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dirOrFile}`);
          readDirectory(dirOrFile);
        } else if (stats.isFile()) {
          const isTextFile = textFileExtensions.test(dirOrFile) || dirOrFile.startsWith(".env");
          console.log(`üìú ${dirOrFile}`);

          if (isTextFile) {
            try {
              const content = fs.readFileSync(dirOrFile, "utf8");
              console.log("üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:");
              console.log(content.substring(0, 5000)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 5000 —Å–∏–º–≤–æ–ª–∞–º–∏
              console.log("‚Äî".repeat(50));
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${dirOrFile}:`, error.message);
            }
          } else {
            console.log(`üìÅ –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª (–Ω–µ —á–∏—Ç–∞–µ–º): ${dirOrFile}`);
          }
        }
      });
    });
  });
};

// –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏–∑ —Ñ–∞–π–ª–∞ dirs.txt
const directoriesFile = "dirs.txt";
readDirectoriesFromFile(directoriesFile);
